snippet stup
	##############################
	## ${1:title}
	##
	## Karl Cottenie
	##
	`r paste("##", Sys.Date())`
	##
	##############################
	
	library(tidyverse)
	library(viridis)
	# + scale_color/fill_viridis(discrete = T/F)
	theme_set(theme_light())
	
	# Startup ends here
	
	## Comment codes ------
	# Coding explanations (#, often after the code, but not exclusively)
	# Code organization (## XXXXX -----)
	# Justification for a section of code ## XXX
	# Dead end analyses because it did not work, or not pursuing this line of inquiry (but leave it in as a trace of it, to potentially solve this issue, or avoid making the same mistake in the future # (>_<) 
	# Solutions/results/interpretations (#==> XXX)
	# Reference to manuscript pieces, figures, results, tables, ... # (*_*)
	# TODO items #TODO
	# names for data frames (dfName), for lists (lsName), for vectors (vcName) (Thanks Jacqueline May)
	

snippet cayman
	rmarkdown::render(
	"${1:file.R}",
	output_format =  prettydoc::html_pretty(
		theme = "cayman"
	),
	output_file = "./output/${1:file}.html"
	)

snippet cayman.full
	`r 
	# this code identifies the last saved script file
	# runs it fully and automatically creates a lightweight report with the cayman theme
	# that has all figures and output
	
	# identify the last saved script file
	vcScriptNameIn = list.files(pattern = "*.R") %>%
	file.info() %>%
	{bind_cols(FileName = row.names(.), .)} %>% 
	arrange(desc(atime)) %>% 
	pull(FileName) %>% 
	.[1]

	# create a new output file name, timestamped
	vcScriptNameOut = paste("./output/", Sys.Date(), 
	"_", vcScriptNameIn, ".html", sep = "")

	# create the report of the full script, reproducibly produced
	rmarkdown::render(vcScriptNameIn,
	output_format =  prettydoc::html_pretty(
	theme = "cayman"),
	output_file = vcScriptNameOut)

	# clean up objects
	rm(vcScriptNameIn, vcScriptNameOut)
	`

snippet starry
	# (*_*)

snippet cayman.sub
	`r
	# identifies the relevant file
	vcScriptNameIn = list.files(pattern = "*.R") %>%
	file.info() %>%
	{bind_cols(FileName = row.names(.), .)} %>% 
	arrange(desc(atime)) %>% 
	pull(FileName) %>% 
	.[1]
	# reads all the lines
	vcScript = vcScriptNameIn %>% 
	read_lines() 
	# identifies the starting position
	vcStartPr = vcScript %>% 
	stringr::str_detect("(\\*_\\*)" ) %>% 
	which()
	#identifies all the empty lines
	vcStopPr = vcScript %>% 
	{nchar(.) == 0} %>% 
	which()
	# connects all the starting positions to the first following empty line
	dfOutput = rbind(vcStartPr,
	vcStartPr %>% 
	sapply( function(x) {
	{vcStopPr > x} %>% 
	which %>% 
	min %>% 
	vcStopPr[.] 
	}))
	# create a temp output script file name, timestamped
	vcScriptNameOut = paste(Sys.Date(), vcScriptNameIn, sep = "_")
	# extract all the relevant lines that need to go into the report
	apply(dfOutput, 2, function(x) vcScript[x[1]:x[2]]) %>% 
	unlist() %>% 
	write_lines(vcScriptNameOut) # create the temp file
	# create a report for the temporary file
	rmarkdown::render(
	vcScriptNameOut,
	output_format =  prettydoc::html_pretty(
	theme = "cayman"),
	output_file = paste("./output/", vcScriptNameOut, ".html", sep = ""))
	# remove the temporary file
	file.remove(vcScriptNameOut)
	# remove the temporary objects
	rm(vcScriptNameIn, vcScriptNameOut, vcScript, vcStartPr, vcStopPr, dfOutput)
	`
